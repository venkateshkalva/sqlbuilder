<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Weekly Task Card</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<style>
    body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }
    .card {
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 80%;
        max-width: 800px;
        display: flex;
        flex-direction: column;
    }
    .navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .calendar {
        margin-bottom: 20px;
    }
    .table-container {
        display: flex;
        flex-direction: column;
        overflow-x: auto;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        padding: 10px;
        text-align: center;
        min-width: 100px;
    }
    th {
        border-bottom: 2px solid #ccc;
    }
    .totalHours {
        font-weight: bold;
    }
    .worked-hours-row td {
        border-top: 2px solid #ccc;
    }
    input[type="text"] {
        width: 50%;
        text-align: center;
        box-sizing: border-box;
    }
    .status-100 {
        border: 2px solid rgb(112, 34, 34) !important;
    }
    .status-200 {
        border: 2px solid rgb(136, 180, 136) !important;
    }
    .status-300 {
        border: 2px solid grey !important;
    }
    .activity-button {
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        color: white;
        background-color: transparent;
    }
    .play-button .fa-play {
        color: #28a745;
    }
    .play-button:hover .fa-play {
        color: #218838;
    }
    .pause-button .fa-pause {
        color: #dc3545;
    }
    .pause-button:hover .fa-pause {
        color: #c82333;
    }
    .deploy-button {
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        background-color: transparent;
        display: none; /* Hidden by default */
    }
    .deploy-button .fa-check {
        color: #007bff;
    }
    .deploy-button:hover .fa-check {
        color: #0056b3;
    }
    .release-button {
        padding: 8px 12px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .release-button:hover {
        background-color: #0056b3;
    }
    .activity-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .star {
        cursor: pointer;
        font-size: 20px;
        color: gray;
    }
    .star.active {
        color: gold;
    }
    .client-info {
        text-align: left;
    }
    .client-info > div {
        margin-top: 5px;
    }
</style>
</head>
<body>

<div class="card">
    <div class="navigation">
        <button onclick="navigateWeek(-1)">Previous Week</button>
        <span id="weekRange"></span>
        <button onclick="navigateWeek(1)">Next Week</button>
    </div>
    <input type="date" id="calendar" class="calendar" onchange="updateDate()">
    <div class="table-container">
        <table id="taskTable">
            <thead id="tableHead">
                <tr>
                    <th>Star</th>
                    <th>Client</th>
                    <th>Sun</th>
                    <th>Mon</th>
                    <th>Tue</th>
                    <th>Wed</th>
                    <th>Thu</th>
                    <th>Fri</th>
                    <th>Sat</th>
                    <th>Activity</th>
                </tr>
            </thead>
            <tbody>
                <!-- Dynamic content will be inserted here -->
            </tbody>
        </table>
    </div>
</div>

<script>
let currentDate = new Date();
let sampleData = [];

async function fetchData() {
    try {
        const response = await fetch('https://api.example.com/tasks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ date: currentDate }),
        });
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching data:', error);
        return null;
    }
}

async function navigateWeek(direction) {
    currentDate.setDate(currentDate.getDate() + direction * 7);
    sampleData = await fetchData() || getSampleData();
    updateCard();
}

async function updateDate() {
    const selectedDate = document.getElementById('calendar').value;
    currentDate = new Date(selectedDate);
    sampleData = await fetchData() || getSampleData();
    updateCard();
}

function formatDate(date, format) {
    const options = { year: 'numeric', month: 'short', day: '2-digit' };
    switch(format) {
        case 'full':
            return date.toLocaleDateString('en-US', options).replace(/,/g, '');
        case 'short':
            return date.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit' });
        case 'fullShortYear':
            return date.toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' });
        default:
            return date.toLocaleDateString('en-US', options);
    }
}

function updateHours() {
    console.log('Hours updated!');
    // Add your logic to handle the updated hours
}

function handleHoursInputClick(event) {
    const input = event.target;
    const clientId = input.dataset.clientId;
    const matterId = input.dataset.matterId;
    const taskId = input.dataset.taskId;
    const subTaskId = input.dataset.subTaskId;
    const timeEntryId = input.dataset.timeEntryId;
    const hours = input.value;
    const date = input.dataset.date;
    callFetchApi(clientId, matterId, taskId, subTaskId, timeEntryId, hours, date);
}

function callFetchApi(clientId, matterId, taskId, subTaskId, timeEntryId, hours, date) {
    const payload = {
        clientId,
        matterId,
        taskId,
        subTaskId,
        timeEntryId,
        hours,
        date
    };

    console.log('Calling API with payload:', payload);

    fetch('https://api.example.com/update-hours', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
    })
    .then(response => response.json())
    .then(data => {
        console.log('API response:', data);
        // Handle the response as needed
    })
    .catch(error => {
        console.error('Error calling API:', error);
    });
}

function toggleActivity(button, timeSpan, deployButton) {
    if (button.classList.contains('play-button')) {
        button.innerHTML = '<i class="fas fa-pause"></i>';
        button.classList.remove('play-button');
        button.classList.add('pause-button');
    } else {
        button.innerHTML = '<i class="fas fa-play"></i>';
        button.classList.remove('pause-button');
        button.classList.add('play-button');

        timeSpan.textContent = timeSpan.dataset.originalTime;
        deployButton.style.display = 'none';
    }
}

function showDeployButton(timeSpan, deployButton) {
    deployButton.style.display = 'inline';
    timeSpan.dataset.originalTime = timeSpan.textContent;
    const hrs = timeSpan.dataset.hrsClocked;
    const mins = timeSpan.dataset.minsClocked;
    timeSpan.textContent = `${hrs > 0 ? hrs + 'h ' : ''}${mins > 0 ? mins + 'm' : ''}`;
}

function toggleStar(star) {
    star.classList.toggle('active');
}

function getSampleData() {
    return [
        {
            clientId: 68,
            clientName: "capitalOne",
            matterId: 76,
            matterName: "test3",
            taskID: 55,
            taskName: "ftetdf",
            subTaskID: 4,
            subTaskName: "bbbjd",
            starred: true,
            sun_HR: 0,
            mon_HR: 5,
            tue_HR: 6.5,
            wed_HR: 0,
            thu_HR: 7,
            fr_HR: 3,
            sat_HR: 3.3,
            sun_StatusID: 0,
            mon_StatusID: 200,
            tue_StatusID: 300,
            wed_StatusID: 0,
            thu_StatusID: 100,
            fri_StatusID: 200,
            sat_StatusID: 300,
            Sun_TimeEntryID: 0,
            mon_TimeEntryID: 4,
            tue_TimeEntryID: 5,
            wed_TimeEntryID: 0,
            thu_TimeEntryID: 0,
            fri_TimeEntryID: 22,
            sat_TimeEntryID: 45,
            startStopFlag: true,
            hrsClocked: 5,
            minsClocked: 35
        }
    ];
}

async function updateCard() {
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());

    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);

    const weekRange = document.getElementById('weekRange');
    weekRange.textContent = `${formatDate(startOfWeek, 'full')} - ${formatDate(endOfWeek, 'full')}`;

    const tableHead = document.getElementById('tableHead').rows[0];
    const taskTableBody = document.querySelector('#taskTable tbody');
    taskTableBody.innerHTML = ''; // Clear existing content

    // Update table headers
    for (let j = 2; j <= 8; j++) {
        const date = new Date(startOfWeek);
        date.setDate(date.getDate() + (j - 2));
        const header = tableHead.cells[j];
        header.textContent = `${date.toLocaleDateString('en-US', { weekday: 'short' })} ${formatDate(date, 'short')}`;
    }

    // Create task rows
    sampleData.forEach(task => {
        // Combined row
        const row = document.createElement('tr');

        const starCell = document.createElement('td');
        const starIcon = document.createElement('span');
        starIcon.innerHTML = '★';
        starIcon.classList.add('star');
        if (task.starred) {
            starIcon.classList.add('active');
        }
        starIcon.onclick = () => toggleStar(starIcon);
        starCell.appendChild(starIcon);
        row.appendChild(starCell);

        const clientCell = document.createElement('td');
        clientCell.classList.add('client-info');
        clientCell.innerHTML = `
            <div><strong>Client:</strong> ${task.clientName}</div>
            <div><strong>Matter:</strong> ${task.matterName}</div>
            <div><strong>Task:</strong> ${task.taskName}</div>
            <div><strong>Subtask:</strong> ${task.subTaskName}</div>
        `;
        row.appendChild(clientCell);

        const hours = [
            { day: 'sun', value: task.sun_HR, status: task.sun_StatusID, timeEntryId: task.Sun_TimeEntryID },
            { day: 'mon', value: task.mon_HR, status: task.mon_StatusID, timeEntryId: task.mon_TimeEntryID },
            { day: 'tue', value: task.tue_HR, status: task.tue_StatusID, timeEntryId: task.tue_TimeEntryID },
            { day: 'wed', value: task.wed_HR, status: task.wed_StatusID, timeEntryId: task.wed_TimeEntryID },
            { day: 'thu', value: task.thu_HR, status: task.thu_StatusID, timeEntryId: task.thu_TimeEntryID },
            { day: 'fri', value: task.fr_HR, status: task.fri_StatusID, timeEntryId: task.fri_TimeEntryID },
            { day: 'sat', value: task.sat_HR, status: task.sat_StatusID, timeEntryId: task.sat_TimeEntryID }
        ];

        hours.forEach((hour, index) => {
            const cell = document.createElement('td');
            const input = document.createElement('input');
            input.type = 'text';
            input.value = hour.value;
            input.classList.add(`status-${hour.status}`);
            input.dataset.timeEntryId = hour.timeEntryId; // Assign timeEntryId to input
            input.dataset.clientId = task.clientId;
            input.dataset.matterId = task.matterId;
            input.dataset.taskId = task.taskID;
            input.dataset.subTaskId = task.subTaskID;
            const cellDate = new Date(startOfWeek);
            cellDate.setDate(startOfWeek.getDate() + index);
            input.dataset.date = formatDate(cellDate, 'fullShortYear');
            input.onclick = handleHoursInputClick;
            cell.appendChild(input);
            row.appendChild(cell);
        });

        const activityCell = document.createElement('td');
        const activityDiv = document.createElement('div');
        activityDiv.classList.add('activity-info');
        const activityButton = document.createElement('button');
        activityButton.innerHTML = task.startStopFlag ? '<i class="fas fa-pause"></i>' : '<i class="fas fa-play"></i>';
        activityButton.classList.add('activity-button');
        activityButton.classList.add(task.startStopFlag ? 'pause-button' : 'play-button');
        const activityTime = document.createElement('span');
        activityTime.textContent = `${task.hrsClocked > 0 ? task.hrsClocked + 'h ' : ''}${task.minsClocked > 0 ? task.minsClocked + 'm' : ''}`;
        activityTime.dataset.hrsClocked = task.hrsClocked;
        activityTime.dataset.minsClocked = task.minsClocked;
        activityDiv.appendChild(activityButton);
        activityDiv.appendChild(activityTime);

        const deployButton = document.createElement('button');
        deployButton.innerHTML = '<i class="fas fa-check"></i>';
        deployButton.classList.add('deploy-button');
        deployButton.id = 'releaseGridLevelTE';
        deployButton.onclick = () => {
            // Add your deploy logic here
            console.log('Deploy clicked for:', task);
        };

        activityButton.onclick = () => {
            toggleActivity(activityButton, activityTime, deployButton);
            if (activityButton.classList.contains('pause-button')) {
                showDeployButton(activityTime, deployButton);
            }
        };

        activityDiv.appendChild(deployButton);
        activityCell.appendChild(activityDiv);
        row.appendChild(activityCell);

        taskTableBody.appendChild(row);
    });

    // Create a row for total worked hours
    const totalHoursRow = document.createElement('tr');
    totalHoursRow.classList.add('worked-hours-row');

    const emptyStarCell = document.createElement('td');
    totalHoursRow.appendChild(emptyStarCell);

    const totalHoursLabelCell = document.createElement('td');
    totalHoursLabelCell.textContent = 'Worked Hours';
    totalHoursRow.appendChild(totalHoursLabelCell);

    for (let j = 0; j < 7; j++) {
        let totalHours = 0;
        sampleData.forEach(task => {
            totalHours += [
                task.sun_HR, task.mon_HR, task.tue_HR, task.wed_HR, task.thu_HR, task.fr_HR, task.sat_HR
            ][j] || 0;
        });
        const totalHoursCell = document.createElement('td');
        totalHoursCell.textContent = totalHours;
        totalHoursRow.appendChild(totalHoursCell);
    }

    const totalHoursActivityCell = document.createElement('td');
    const releaseButton = document.createElement('button');
    releaseButton.textContent = 'Release';
    releaseButton.classList.add('release-button');
    totalHoursActivityCell.appendChild(releaseButton);
    totalHoursRow.appendChild(totalHoursActivityCell);

    taskTableBody.appendChild(totalHoursRow);
}

// Initialize card with current date
(async function() {
    sampleData = getSampleData();
    updateCard();
})();
</script>

</body>
</html>
